package al.tetra.licence.controller;

import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.Pane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import al.tetra.licence.entity.Certificate;
import al.tetra.licence.helper.MessageType;
import al.tetra.licence.service.CertificateService;
import al.tetra.licence.util.CommandLineUtil;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.PasswordField;

@Component
public class CertificateController {
	@FXML
	private Button validate_certificate;
	@FXML
	private TextField cert_alias;
	@FXML
	private PasswordField cert_pass;
	@FXML
	private PasswordField certKeyPass;
	@FXML
	private Label typeOfAction1;
	@FXML
	private Label passlabel;
	@FXML
	private Label gen_success;
	@FXML
	private Button cert_upload;
	@FXML
	private Label messageLabel;
	@FXML
	private Label path;
	@FXML
	private TextField serialNumberField;
	@FXML
	private TextField subjectDNField;
	@FXML
	private TextField notBeforeField;
	@FXML
	private TextField notAfterField;
	@FXML
	private Pane conatiner;
	@FXML
	private PasswordField password;
	@FXML
	private Label filepath;
	@FXML
	private ImageView open_folder;

	@Autowired
	private CommandLineUtil cmd;

	private File certFile = null;
	// Event Listener on Button[#validate_certificate].onAction

	@Autowired
	private CertificateService certificateService;

	@FXML
	public void validateCertificate(ActionEvent event) {

		if (this.certFile == null || this.certFile.getPath() == null) {
			createMessageLabel("Ju lutem zgjidhni certifikaten", MessageType.ERROR);
			return;
		}

		Certificate cert = new Certificate();
		cert.setFileLocation(this.certFile.getPath().toString());
		cert.setAlias(cert_alias.getText().toString());
		cert.setPass(cert_pass.getText().toString());
		cert.setKeyPass(certKeyPass.getText().toString());

		try {
			if (certificateService.validateCertificate(cert) != null) {
				createMessageLabel("Certifikata eshte e sakte", MessageType.SUCCESS);
				uploadCertificateData(cert);
				/*
				 * System.err.println("cert"+cert.getFileLocation());
				 * path.setText(cert.getFileLocation());
				 */

			} else {
				messageLabel.setVisible(false);
				createMessageLabel("Te dhenat nuk jane te sakta", MessageType.ERROR);
				conatiner.setVisible(false);
				cert_alias.clear();
				cert_pass.clear();
				certKeyPass.clear();

			}

		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("Certifikata nuk eshte e sakte");

		}

	}

	// Event Listener on Button[#cert_upload].onAction
	@FXML
	public void uploadCertificate(ActionEvent event) throws IOException {
		// TODO Autogenerated

		final Stage stage = new Stage();
		FileChooser.ExtensionFilter p12Filter = new FileChooser.ExtensionFilter("P12 Files", "*.p12");
		FileChooser fileChooser = new FileChooser();
		fileChooser.getExtensionFilters().add(p12Filter);
		fileChooser.setTitle("Ngarko Certifikaten e derguar nga tatimet");
		File file = fileChooser.showOpenDialog(stage);
		conatiner.setVisible(false);
		password.setVisible(true);
		passlabel.setVisible(true);
		messageLabel.setVisible(false);
		filepath.setText(file.getPath());
		cert_alias.clear();
		cert_pass.clear();
		certKeyPass.clear();

		if (file != null) {
			this.certFile = file;
		}
	}

	private void createMessageLabel(String message, MessageType type) {

		messageLabel.setText(message);

		switch (type) {
		case ERROR:
			messageLabel.getStyleClass().setAll("alert", "alert-danger");
			break;
		case INFO:
			messageLabel.getStyleClass().setAll("alert", "alert-info");
			break;
		case NONE:
			// messageLabel.setStyle("-fx-background-color: blue;");
			break;
		case WARNING:
			messageLabel.getStyleClass().setAll("alert", "alert-warning");
			break;
		case SUCCESS:
		default:
			messageLabel.getStyleClass().setAll("alert", "alert-success");
			break;
		}

		messageLabel.setVisible(true);
	}

	private void uploadCertificateData(Certificate cert) {
		conatiner.setVisible(true);
		serialNumberField.setText(certificateService.validateCertificate(cert).getSerialNumber().toString());
		// serialNumberField.setVisible(true);
		subjectDNField.setText(certificateService.validateCertificate(cert).getSubjectDN().toString());
		// subjectDNField.setVisible(true);
		notBeforeField.setText(certificateService.validateCertificate(cert).getNotBefore().toGMTString());
		// notBeforeField.setVisible(true);
		notAfterField.setText(certificateService.validateCertificate(cert).getNotAfter().toGMTString());
		// notAfterField.setVisible(true);

	}

	@FXML
	public void extractcertificate(ActionEvent event) throws URISyntaxException {

		try {
			certificateService.extractcertificate(this.certFile, password, open_folder, gen_success);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
